buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'groovy'
    id 'java'
    id 'idea'
}

ext {
    teamCityVersion = '9.0.2'
    crowdVersion = '2.8.0'
    teamCityDistributionDir = "$projectDir/teamcitydist"

    if (project.hasProperty('teamCityDist')) {
        teamCityDistributionDir = project.teamCityDist
    }

    pluginDir = "$buildDir/plugin"
    pluginLibrariesDir = "$pluginDir/server"
    pluginDestinationDir = new File("${project.buildDir}/dist")
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.atlassian.com/repository/public'
    }
}

configurations {
    crowd

    compile {
        extendsFrom crowd
    }

    plugin
}

dependencies {
    crowd "com.atlassian.crowd:crowd-integration-client-rest:$crowdVersion"

    compile files(
            "$project.teamCityDistributionDir/TeamCity/lib/servlet-api.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/web.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/annotations.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/jdom.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/openapi.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/spring.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/common-api.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/guava-13.0.1.jar",
            "$project.teamCityDistributionDir/TeamCity/webapps/ROOT/WEB-INF/lib/log4j-1.2.12.jar",

            "$project.teamCityDistributionDir/TeamCity/devPackage/server-api.jar",
    )

    runtime 'org.slf4j:slf4j-log4j12:1.7.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testRuntime "com.cyrusinnovation:mockito-groovy-support:1.2"

    testCompile 'org.springframework:spring-test:3.0.7.RELEASE'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    testCompile 'org.codehaus.groovy:groovy-all:2.2.1'
}

import org.apache.tools.ant.filters.ReplaceTokens

jar {
    dependsOn test
    metaInf {
        from(sourceSets.main.resources) {
            include 'build-server-plugin*.xml'
        }
    }
    exclude 'build-server-plugin*.xml'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

task downloadTeamCityDistribution << {
    def f = new File("TeamCity-${project.teamCityVersion}.tar.gz")
    def teamcityUrl = "http://download-cf.jetbrains.com/teamcity/TeamCity-${project.teamCityVersion}.tar.gz"
    if (!f.exists()) {
        new URL(teamcityUrl).withInputStream { i -> f.withOutputStream{ it << i }}
    }
}
downloadTeamCityDistribution.onlyIf {
    def destinationFile = file("TeamCity-${project.teamCityVersion}.tar.gz")
    !destinationFile.exists()
}

task deletePreviousVersion(type: Delete, dependsOn: downloadTeamCityDistribution) {
    def versionFile = new File(teamCityDistributionDir, "current.version")
    onlyIf { !versionFile.exists() || !versionFile.text.contains(teamCityVersion) }

    delete teamCityDistributionDir
}

task unpackTeamCityDistribution(type: Copy, dependsOn: deletePreviousVersion) {
    def target = file(project.teamCityDistributionDir)

    onlyIf { !target.exists() }

    from tarTree("TeamCity-${project.teamCityVersion}.tar.gz")
    into target
}

task createVersionFile(dependsOn: unpackTeamCityDistribution) << {
    def versionFile = new File(teamCityDistributionDir, "current.version")
    versionFile.text = teamCityVersion
}
createVersionFile.onlyIf { !new File(teamCityDistributionDir, "current.version").exists()}


compileJava.dependsOn createVersionFile

task copyPluginFile(type: Copy) {
    from(projectDir) {
        include 'teamcity-plugin.xml'
        filter(ReplaceTokens, tokens: [version: project.version])
    }
    into project.pluginDir
}

task copyPluginConfiguration(type: Copy) {
    from(sourceSets.main.resources) {
        include 'teamcity-crowd-plugin.properties'
    }
    into project.pluginLibrariesDir
}

task copyPluginJarFile(dependsOn: jar, type: Copy) {
    from("$project.buildDir/libs") {
        include "*.jar"
    }
    into project.pluginLibrariesDir
}

task copyPluginDependencies(type: Copy) {
    from(configurations.crowd) {
        exclude "activation*.jar", 'commons-codec*', 'commons-collections*', 'commons-land*',  'ehcache*', 'jaxen*', 'jdom*', 'log4j*'
    }
    into project.pluginLibrariesDir
}
//copyPluginDependencies.dependsOn unpackTeamCityDistribution

task buildPlugin(description: 'Prepares ZIP plugin file', type: Zip) {
    destinationDir = project.pluginDestinationDir
    archiveName = "teamcity-crowd-plugin-${project.version}.zip"
    from(project.pluginDir)
}
buildPlugin.dependsOn = [copyPluginFile, copyPluginJarFile, copyPluginDependencies]


task prepareWrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

artifacts {
    plugin buildPlugin
}
